import random

class Product:
    def __init__(self, name, price, availability=True):
        self.name = name
        self.price = price
        self.availability = availability

    def __repr__(self):
        return f"{self.name} (${self.price}) - {'Available' if self.availability else 'Out of Stock'}"

class Store:
    def __init__(self, name, location):
        self.name = name
        self.location = location
        self.inventory = []

    def add_product(self, product):
        self.inventory.append(product)

    def get_product_info(self, product_name):
        return [p for p in self.inventory if p.name.lower() == product_name.lower()]

    def __repr__(self):
        return f"{self.name} in {self.location}"

class User:
    def __init__(self, name, home_city):
        self.name = name
        self.home_city = home_city
        self.product_preferences = []

    def add_product_preference(self, product_name):
        self.product_preferences.append(product_name)

    def __repr__(self):
        return f"{self.name} from {self.home_city}"

def add_multiple_stores(store_data):
    return [Store(name, location) for name, location in store_data]

def add_products_to_stores(stores, product_data):
    for i, (name, price, available) in enumerate(product_data):
        product = Product(name, price, available)
        store_index = i % len(stores)
        stores[store_index].add_product(product)

def find_best_product_option(stores, product_name, home_city=None):
    best_option = None
    for store in stores:
        if home_city and store.location != home_city:
            continue
        for product in store.get_product_info(product_name):
            if product.availability:
                if not best_option or product.price < best_option[1].price:
                    best_option = (store, product)
    return best_option
